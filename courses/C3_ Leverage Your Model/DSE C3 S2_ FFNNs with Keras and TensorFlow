{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DSE C3 S2: FFNNs with Keras and TensorFlow","provenance":[{"file_id":"1Smkoeb0ymRN-pu6AeQDln9CY2zKEQvCs","timestamp":1609810521206},{"file_id":"1LhbPBgNy-AA8tss0TDETxPFxtB2nN2Sw","timestamp":1606866261224},{"file_id":"1Idd3POhDAlJZ_1IzFYTzT_IdsKPLg0fk","timestamp":1606780207676}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python (tunnel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"cells":[{"cell_type":"markdown","metadata":{"id":"vhe1yX4AMckE"},"source":["# DSE Course 2, Session 7: Casting Defect Detection Case Study\r\n","\r\n","**Instructor**: Wesley Beckner\r\n","\r\n","**Contact**: wesleybeckner@gmail.com\r\n","\r\n","<br>\r\n","\r\n","---\r\n","\r\n","<br>\r\n","\r\n","In this session we will continue with our discussion on neural networks. Specifically, we will look at how to build the function approximation machines with Keras/TensorFlow.\r\n","\r\n","<br>\r\n","\r\n","---\r\n","\r\n","<br>\r\n","\r\n","<a name='top'></a>\r\n","\r\n","# Contents\r\n","\r\n","* 2.0 [Preparing Environment and Importing Data](#x.0)\r\n","  * 2.0.1 [Import Packages](#x.0.1)\r\n","  * 2.0.2 [Load Dataset](#x.0.2)\r\n","* 2.1 [Feature Engineering](#x.1)\r\n","* 2.2 [Building the Model](#x.2)\r\n","  * 2.2.1 [Layers, Nodes, and Activation Functions](#x.2.1)\r\n","* 2.3 [Compiling the Model](#x.3)\r\n","  * 2.3.1 [Loss, Optimizer, and Metrics](#x.3.1)\r\n","* 2.4 [Fitting the Model](#x.4)\r\n","  * 2.4.1 [Epoch, Batch](#x.4.1)\r\n","* 2.5 [Evaluating the Model](#x.5)\r\n","* 2.6 [Convolutional NNs](#x.6)\r\n","  * 2.6.1 [Convolutional Layers](#x.6.1)\r\n","  * 2.6.2 [Pooling Layers](#x.6.2)\r\n","  * 2.6.3 [Flattening](#x.6.3)\r\n","  * 2.6.4 [Dropout](#x.6.4)\r\n","  \r\n","  \r\n","\r\n","<br>\r\n","\r\n","---"]},{"cell_type":"markdown","metadata":{"id":"mNtJitcRW51Y"},"source":["<a name='x.0'></a>\r\n","\r\n","## 2.0 Preparing Environment and Importing Data\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"chdcBoBL8SNm"},"source":["<a name='x.0.1'></a>\r\n","\r\n","### 2.0.1 Import Packages\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"R7vDY-8U8SWd"},"source":["<a name='x.0.1'></a>\r\n","\r\n","### 2.0.2 Load Dataset\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"062Czp9-rBOi"},"source":["<a name='x.1'></a>\r\n","\r\n","## 2.1 Feature Engineering\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"wlj85iTSIwji"},"source":["<a name='x.2'></a>\r\n","\r\n","## 2.2 Building the Model\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"4txgFqPUI4Qv"},"source":["<a name='x.2.1'></a>\r\n","\r\n","### 2.2.1 Layers, Nodes, and Activation Functions\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"2p4qhOHy4BCP"},"source":["<a name='x.3'></a>\r\n","\r\n","## 2.3 Compiling the Model\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"CXgU8de-9AVU"},"source":["<a name='x.3.1'></a>\r\n","\r\n","### 2.3.1 Loss, Optimizer, and Metrics\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"2iO95IU4EAba"},"source":["<a name='x.4'></a>\r\n","\r\n","## 2.4 Fitting the Model\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"FFWFQP0r9Ab3"},"source":["<a name='x.4.1'></a>\r\n","\r\n","### 2.4.1 Epoch, Batch\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"pvZsrqIK9AiT"},"source":["<a name='x.5'></a>\r\n","\r\n","## 2.5 Evaluating the Model\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"0qpO_tqgkjGD"},"source":["<a name='x.6'></a>\r\n","\r\n","## 2.6 Convolutional NNs\r\n","\r\n","[back to top](#top)\r\n","\r\n","For Reference: [CNN Explainer](https://poloclub.github.io/cnn-explainer/#article-convolution)"]},{"cell_type":"markdown","metadata":{"id":"cAOy1fsjkn8O"},"source":["<a name='x.6.1'></a>\r\n","\r\n","### 2.6.1 Convolutional Layers\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"pmEDO_Gukohl"},"source":["<a name='x.6.2'></a>\r\n","\r\n","### 2.6.2 Pooling Layers\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"rEckjdXLk8St"},"source":["<a name='x.6.3'></a>\r\n","\r\n","### 2.6.3 Flattening\r\n","\r\n","[back to top](#top)"]},{"cell_type":"markdown","metadata":{"id":"0cemohLSk82b"},"source":["<a name='x.6.4'></a>\r\n","\r\n","### 2.6.4 Dropout\r\n","\r\n","[back to top](#top)"]},{"cell_type":"code","metadata":{"id":"1o9ATkGp3-OR"},"source":[""],"execution_count":null,"outputs":[]}]}